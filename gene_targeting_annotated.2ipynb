{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "# Overview of HyPEFISH experiment design\n",
    "## Terms\n",
    "#### Gene Coding\n",
    "    1. Codebook - mapping of codewords to the gene/transcript they're assigned\n",
    "    2. Codeword - an n-bit combination of 0's and 1's that uniquely identifies a gene\n",
    "    3. Codebit - a single letter/bit of the codeword\n",
    "#### Tool names\n",
    "    1. OligoDesigner\n",
    "    2. Blast\n",
    "    \n",
    "## Gene Selection\n",
    "#### Annotating candidates\n",
    "    1. Make gene list with gene symbols\n",
    "    2. Annotate gene list\n",
    "        a. Length\n",
    "        b. Expression Level\n",
    "        c. GO term - Annotation\n",
    "        d. Transcript Names\n",
    "#### Determining max number oligos per transcript\n",
    "    1. Run Oligo Designer tool suite with low stringency and all the transcripts of interest\n",
    "    2. Remove genes with too few probes\n",
    "    3. Re-evaluate depending on length of interest list and number of codewords in the codebook\n",
    "    \n",
    "## Final Oligo Design"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "# Methodology - #1 Import dependent metadata"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "## A. Setup link to google sheets and read expression sheet\n",
    "    1. Setup your project and create client.json interface to project on Google Drive API\n",
    "    2. Open sheet\n",
    "    3. Convert sheet to pandas DataFrame\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "from oauth2client.service_account import ServiceAccountCredentials\n",
    "import gspread\n",
    "\n",
    "import sys\n",
    "if sys.version_info[0] < 3: \n",
    "    from StringIO import StringIO\n",
    "else:\n",
    "    from io import StringIO\n",
    "\n",
    "scope = ['https://spreadsheets.google.com/feeds']\n",
    "creds = ServiceAccountCredentials.from_json_keyfile_name('/Users/robertf/Downloads/client_secret.json', scope)\n",
    "client = gspread.authorize(creds)\n",
    "\n",
    "expression_worksheet = client.open(\"bmdm_gene_selection\").sheet1\n",
    "expression = StringIO(expression_worksheet.export())\n",
    "expression_df = pd.read_csv(expression)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "def col_cells(worksheet, col):\n",
    "    \"\"\"Returns a range of cells in a `worksheet`'s column `col`.\"\"\"\n",
    "    start_cell = worksheet.get_addr_int(1, col)\n",
    "    end_cell = worksheet.get_addr_int(worksheet.row_count, col)\n",
    "\n",
    "    return worksheet.range('%s:%s' % (start_cell, end_cell))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "## B. Import codebook for genes\n",
    "    1. Decide which codebook to use, or run building_codewords script\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Number of codewords in codebook -', 148)\n"
     ]
    }
   ],
   "source": [
    "def read_codebook(cbook_fname):\n",
    "    \"\"\"Read CSV of n-bit codewords.\"\"\"\n",
    "    cwords = []\n",
    "    with open(cbook_fname, 'r') as f:\n",
    "        column_name = f.readline().strip()\n",
    "        for l in f.readlines():\n",
    "            cwords.append(l.strip())\n",
    "    return cwords\n",
    "codewords = read_codebook('./codewords.txt')\n",
    "np.random.shuffle(codewords)\n",
    "print('Number of codewords in codebook -', len(codewords))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "## C. Import sequences of the readout probes their order defines which codebit they are assigned.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "readout_names = ['RS0095', 'RS0109', 'RS0175', 'RS0237', 'RS0307', 'RS0332', 'RS0384', 'RS0406', \n",
    "                'RS0451', 'RS0468', 'RS0548', 'RS64.0', 'RS156.0', 'RS278.0', 'RS313.0', 'RS643.0', \n",
    "                'RS740.0', 'RS810.0']\n",
    "def write_codebook(rows, fname, codewords, codebook_style = '148MHD4'):\n",
    "    with open(fname, 'w') as f:\n",
    "        f.write('version'+','+str(1)+'\\n')\n",
    "        f.write('codebook_name'+','+codebook_style+'\\n')\n",
    "        f.write('bit_names,'+','.join(readout_names)+'\\n')\n",
    "        f.write('name, id, barcode\\n')\n",
    "        for row in rows:\n",
    "            f.write(','.join([row[0], row[1], row[2]+'\\n']))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "## ?? Looking up and matching between Gene Symbol, Gene Names, and Ensembl IDs\n",
    "    1. Import relevent libaries\n",
    "    2. look shit up"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "import gtfparse\n",
    "\n",
    "import pyensembl\n",
    "pyensembl.EnsemblRelease(release=87)\n",
    "\n",
    "def geneSymbol_to_ensembl(gene_symbol_list, biomart_download_fname,\n",
    "                          organism='human', min_length=1800):\n",
    "    \"\"\"\n",
    "    Look up the ensembl of gene symbols.\n",
    "    \"\"\"\n",
    "    annotations = []\n",
    "    with open(biomart_download_fname, 'r') as f:\n",
    "        transcript_df = pd.read_csv(f)\n",
    "        genes = [i.value for i in gene_symbol_list if i != '']\n",
    "        transcript_df = transcript_df[transcript_df[u'Gene name'].isin(genes)]\n",
    "    for cell in gene_symbol_list:\n",
    "        gene = cell.value\n",
    "        if gene == '':\n",
    "            continue\n",
    "\n",
    "        transcripts = transcript_df[transcript_df[u'Gene name'] == gene].drop_duplicates('Transcript stable ID')\n",
    "        transcripts = transcripts[transcripts[u'Transcript type']==u'protein_coding'].sort_values('Transcript length (including UTRs and CDS)', ascending=False)\n",
    "\n",
    "        if len(transcripts)==0:\n",
    "            print('Failed finding: ', gene)\n",
    "            annotations.append((gene, None))\n",
    "        elif transcripts.iloc[0]['Transcript length (including UTRs and CDS)'] > min_length:\n",
    "            annotations.append((gene, transcripts))\n",
    "        else:\n",
    "            print('Gene too short: ', gene)\n",
    "            annotations.append((gene, transcripts))\n",
    "    return annotations\n",
    "        \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('Arhgef37',\n",
       "              Gene stable ID Transcript stable ID Gene name Source of gene name  \\\n",
       "  158737  ENSMUSG00000045094   ENSMUST00000171629  Arhgef37          MGI Symbol   \n",
       "  \n",
       "          Transcript length (including UTRs and CDS) Transcript type  \\\n",
       "  158737                                        3234  protein_coding   \n",
       "  \n",
       "                                    GO term name GO term accession  \n",
       "  158737  positive regulation of GTPase activity        GO:0043547  )]"
      ]
     },
     "execution_count": 162,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[i for i in gene_annotations if i[0]=='Arhgef37']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "expression_worksheet.update_cells(tname)\n",
    "expression_worksheet.update_cells(length)\n",
    "expression_worksheet.update_cells(go)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Failed finding: ', 'E230013L22Rik')\n",
      "('Failed finding: ', 'Gdap10')\n",
      "('Failed finding: ', 'Gm11427')\n",
      "('Failed finding: ', 'Gm16685')\n",
      "('Failed finding: ', 'Gm43197')\n",
      "('Failed finding: ', 'Mir155hg')\n",
      "('Gene too short: ', 'Trim13')\n",
      "('Gene too short: ', 'Wfdc21')\n",
      "('Gene too short: ', 'Tnfsf9')\n",
      "('Gene too short: ', 'Sap30')\n",
      "('Gene too short: ', 'Marcksl1')\n",
      "('Gene too short: ', 'Ly6a')\n",
      "('Gene too short: ', 'Il1b')\n",
      "('Gene too short: ', 'Srgn')\n",
      "('Gene too short: ', 'Ms4a4c')\n",
      "('Gene too short: ', 'Ass1')\n",
      "('Gene too short: ', 'Ccl17')\n",
      "('Gene too short: ', 'Lmo4')\n",
      "('Gene too short: ', 'Stfa2')\n",
      "('Gene too short: ', 'Cxcl10')\n",
      "('Gene too short: ', 'Gm5483')\n",
      "('Gene too short: ', 'Gpr84')\n",
      "('Gene too short: ', 'Tarm1')\n",
      "('Gene too short: ', 'Cd69')\n",
      "('Gene too short: ', 'Fam26f')\n",
      "('Gene too short: ', 'Acp5')\n",
      "('Gene too short: ', 'Bcl2a1b')\n",
      "('Gene too short: ', 'Cdc42ep2')\n",
      "('Gene too short: ', 'Gm13889')\n",
      "('Gene too short: ', 'Tmem200b')\n",
      "('Gene too short: ', 'Il23a')\n",
      "('Gene too short: ', 'H2-M2')\n",
      "('Gene too short: ', 'Csf3')\n",
      "('Gene too short: ', 'Fpr1')\n",
      "('Gene too short: ', 'Gpr18')\n",
      "('Gene too short: ', 'Ebi3')\n",
      "('Gene too short: ', 'Fas')\n",
      "('Gene too short: ', 'Ier3')\n",
      "('Gene too short: ', 'Cxcl3')\n",
      "('Gene too short: ', 'Tmem243')\n",
      "('Gene too short: ', 'Cxcl11')\n",
      "('Gene too short: ', 'Arg2')\n",
      "('Gene too short: ', 'Klra2')\n",
      "('Gene too short: ', 'Bcl2a1d')\n",
      "('Gene too short: ', 'Nupr1')\n",
      "('Gene too short: ', 'Batf')\n",
      "('Gene too short: ', 'Bcl2a1a')\n",
      "('Gene too short: ', 'Csf2')\n",
      "('Gene too short: ', 'Casp4')\n",
      "('Gene too short: ', 'Lcn2')\n",
      "('Gene too short: ', 'Fpr2')\n",
      "('Gene too short: ', 'Stfa3')\n"
     ]
    }
   ],
   "source": [
    "# Add info to spreadsheet\n",
    "# WARNING - you must figure out column numbers and change bits for new gene sets\n",
    "gene_annotations = geneSymbol_to_ensembl(col_cells(expression_worksheet, 1)[1:], './mouse_gene_info.txt', organism='mouse')\n",
    "gname = col_cells(expression_worksheet, 1)[1:]\n",
    "tname = col_cells(expression_worksheet, 4)[1:]\n",
    "length = col_cells(expression_worksheet, 5)[1:]\n",
    "go = col_cells(expression_worksheet, 6)[1:]\n",
    "update = []\n",
    "for idx, g in enumerate(gene_annotations):\n",
    "    info = g[1]\n",
    "    if info is None:\n",
    "        continue\n",
    "    max_transcript = info['Transcript stable ID'].iloc[0]\n",
    "    max_length = info['Transcript length (including UTRs and CDS)'].iloc[0]\n",
    "    go_name = info['GO term name'].iloc[0]\n",
    "    tname[idx].value = max_transcript\n",
    "    length[idx].value = max_length\n",
    "    go[idx].value = go_name\n",
    "expression_worksheet.update_cells(tname)\n",
    "expression_worksheet.update_cells(length)\n",
    "expression_worksheet.update_cells(go)\n",
    "\n",
    "expression = StringIO(expression_worksheet.export())\n",
    "expression_df = pd.read_csv(expression)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "# Interfacing with MATLAB Zhuang Lab oligo design\n",
    "## Overview\n",
    "    1. Location - /bigstore/GeneralStorage/Rob/merfish/\n",
    "    2. Components\n",
    "        a. Repos - https://github.com/ZhuangLab\n",
    "            i. MERFISH_analysis\n",
    "            ii. matlab-storm\n",
    "            iii. storm-analysis\n",
    "        b. Other software - /bigstore/GeneralStorage/Rob/merfish/dependencies\n",
    "            i. oligoarrayaux-3.8\n",
    "            ii. OligoArray2_1\n",
    "            iii. blast_legacy\n",
    "    3. Component Parameter Input Files\n",
    "        a. Reference Sequences\n",
    "            i. Transcripts\n",
    "            ii. Noncoding RNA\n",
    "            iii. Primers\n",
    "            iv. Readout Sequeces\n",
    "    3. User input files\n",
    "        a. Codebook - specially formatted table of gene name, transcript id, and codeword.\n",
    "            i. disulfide_readouts.fasta\n",
    "            ii. codebook.txt\n",
    "        b. Sequence Files\n",
    "            i. RNA Seq Counts\n",
    "                1. Generated with cufflinks\n",
    "                2. Names must match those provided in the codebook\n",
    "            ii. Transcript reference sequences\n",
    "            iii. Primers\n",
    "            iv. Readout Seqs\n",
    "\n",
    "#### Example workflow\n",
    "    1. Open library_design_wollman.m template script\n",
    "    2. Check that all dependencies and their PATHs are correct\n",
    "    3. Run MATLAB script\n",
    "    4. Parse output with python\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "## Run low stringency oligo design to find rough oligos/gene\n",
    "    1. Use a cutoff for expression to not include very highly expressed genes\n",
    "    2. Write the codebook and use Zhuang Lab tool for MERFISH oligo design\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "i = 0\n",
    "rows = []\n",
    "for idx, row in expression_df.iterrows():\n",
    "    if row['TranscriptID'] != 'Not Found' and not (row.Gene_Name is np.nan):\n",
    "        rows.append((row['Gene_Name'], row['TranscriptID'], codewords[i]))\n",
    "        i+=1\n",
    "        \n",
    "write_codebook(rows, './bmdm_codebook.txt', codewords)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Acod1', 'Acp5', 'Alpk1', 'Ampd3', 'Arhgef3', 'Arhgef37', 'Birc3',\n",
       "       'Cd40', 'Cish', 'Cp', 'Cxcl16', 'Daam1', 'Dgat2', 'Dyrk2',\n",
       "       'Exoc3l4', 'Fam208b', 'Gbp3', 'Gbp5', 'Gca', 'Gng4', 'Gpr132',\n",
       "       'Gpr85', 'Il10ra', 'Il4i1', 'Il6', 'Itpr1', 'Lacc1', 'Lcp2',\n",
       "       'Lpar1', 'Lrrc8c', 'Map3k8', 'Mapkapk2', 'Mfsd7a', 'Mob3c', 'N4bp1',\n",
       "       'Nck1', 'Neurl3', 'Nfkbib', 'Ppp4r2', 'Ptges', 'Ptgs2', 'Rab11fip1',\n",
       "       'Rarg', 'Rel', 'Rffl', 'Rgs16', 'Rhof', 'Sav1', 'Sele', 'Sell',\n",
       "       'Serp1', 'Sh3bp4', 'Shisa3', 'Tifa', 'Tnfrsf8', 'Tnip1', 'Trem1',\n",
       "       'Trpm4', 'Zbtb10', 'Zbtb5', 'Zc3h12c'], dtype=object)"
      ]
     },
     "execution_count": 160,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "expression_cutoff = 400\n",
    "subdf = expression_df[expression_df.Basal<expression_cutoff]\n",
    "subdf = subdf.drop_duplicates('max_length_iso')\n",
    "tid = [i for i in subdf.TranscriptID.values if not isinstance(i, float)]\n",
    "gname = [i for i in subdf.Gene_Name.values if not isinstance(i, float)][:61]\n",
    "codewords = np.random.choice(codewords, size=61, replace=False)\n",
    "df = pd.DataFrame.from_dict({'tid': tid, 'gname':gname, 'codeword':codewords})\n",
    "df.gname.values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "### Create the input files for MATLAB Script probably won't implement just do that part manually\n",
    "    1. codebook.txt\n",
    "    2. parameters.txt\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "def write_merfish_matlab_paths(params, fname=temp.m):\n",
    "    header = \"\"\"\n",
    "    %% ------------------------------------------------------------------------\n",
    "    % Setup the workspace\n",
    "    %%-------------------------------------------------------------------------\n",
    "    \"\"\"\n",
    "    test = 'matlab_startup'\n",
    "    if test in params:\n",
    "        matlab_startup = params[test]\n",
    "    else:\n",
    "        matlab_startup = '/bigstore/GeneralStorage/Rob/merfish/MERFISH_analysis-master/startup/'\n",
    "    test = 'mfilename'\n",
    "    if test in params:\n",
    "        mfilename = params[test]\n",
    "    else:\n",
    "        mfilename = 'testing_library_design'\n",
    "    test = 'merbase'\n",
    "    if test in params:\n",
    "        merbase = params[test]\n",
    "    else:\n",
    "        merbase = '/bigstore/GeneralStorage/Rob/merfish/MERFISH_analysis-master/MERFISH_Examples2'\n",
    "    \n",
    "    test = 'fpkm_path'\n",
    "    if test in params:\n",
    "        fpkm_path = params[test]\n",
    "    else:\n",
    "        fpkm_path = \"fullfile(basePath, '/SRR1205854/tid_fpkm.dat');\"\n",
    "    test = 'codebook_path'\n",
    "    if test in params:\n",
    "        codebook_path = params[test]\n",
    "    else:\n",
    "        codebook_path = './codebook.txt'\n",
    "    test = 'save_path'\n",
    "    if test in params:\n",
    "        save_path = params[test]\n",
    "    else:\n",
    "        save_path = './library_design'\n",
    "\n",
    "    ## Set up parameters\n",
    "    pool_size = 12; # number of parallel workers to spawn\n",
    "    nc_length_cutoff = 15; # length of homology between target ncRNA (rRNA, tRNA, etc) - 15 default\n",
    "    low_abund_cutoff = 1e-2; # Do not screen RNA with abundance below this cutoff - 0.01 FPKM default\n",
    "    probes_per_gene = 64;\n",
    "    library_name = mfilename;\n",
    "\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "mfilename\n",
    "merbase\n",
    "merfish\n",
    "parameters_file = \"\"\"\n",
    "%% ------------------------------------------------------------------------\n",
    "% Setup the workspace\n",
    "%%-------------------------------------------------------------------------\n",
    "cd /bigstore/GeneralStorage/Rob/merfish/MERFISH_analysis-master/startup/\n",
    "merfish_startup;\n",
    "\n",
    "mfilename = 'mouse_sptbn1_PPP2CA_controls'; % name to save script\n",
    "merbase = '/bigstore/GeneralStorage/Rob/merfish/MERFISH_analysis-master/MERFISH_Examples2';\n",
    "%% Set up paths\n",
    "% Raw data paths\n",
    "basePath = fullfile(MERFISHAnalysisPath, 'mouse'); % Base path where all required files can be found\n",
    "    % MERFISHAnalysisPath is defined in the startup script for MERFISH_analysis;\n",
    "    % MERFISH_Examples2 is a folder that contains several files required to\n",
    "    % run this script.  These example files can be downloaded from http://zhuang.harvard.edu/merfish/MERFISHData/MERFISH_Examples2.zip\n",
    "    \n",
    "rawTranscriptomeFasta = fullfile(basePath, 'mer_transcripts.fa');\n",
    "fpkmPath = fullfile(basePath, '/SRR1205854/tid_fpkm.dat');\n",
    "ncRNAPath = fullfile(basePath, 'Mus_musculus.GRCm38.ncrna.fa');\n",
    "readoutPath = fullfile(basePath,  'disulfide_readouts.fasta');\n",
    "codebookPath = fullfile(basePath,  'sptbn1_codebook.txt');\n",
    "\n",
    "% Paths at which to save created objects\n",
    "analysisSavePath = SetFigureSavePath(fullfile(basePath, 'libraryDesign/'), 'makeDir', true);\n",
    "\n",
    "rRNAtRNAPath = fullfile(analysisSavePath, 'rRNAtRNA.fa');\n",
    "transcriptomePath = fullfile(analysisSavePath, 'transcriptomeObj');\n",
    "specificityTablePath = fullfile(analysisSavePath, 'specificityTable');\n",
    "isoSpecificityTablePath = fullfile(analysisSavePath, 'isoSpecificityTables');\n",
    "trDesignerPath = fullfile(analysisSavePath, 'trDesigner');\n",
    "trRegionsPath =  fullfile(analysisSavePath, 'tr_GC_43_63_Tm_66_76_Len_30_30_IsoSpec_0.75_1_Spec_0.75_1');\n",
    "\n",
    "%% Set up parameters\n",
    "pool_size = 12; % number of parallel workers to spawn\n",
    "nc_length_cutoff = 15; % length of homology between target ncRNA (rRNA, tRNA, etc) - 15 default\n",
    "low_abund_cutoff = 1e-2; % Do not screen RNA with abundance below this cutoff - 0.01 FPKM default\n",
    "probes_per_gene = 64;\n",
    "library_name = 'mouse_sptbn1_ppp2ca_control';\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "#### Parse output from MERFISH tool"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "def parse_merfish_oligos(fname, counts_df = None,\n",
    "                         counts_df_column='FPKM', tid_column='transcript_id'):\n",
    "    \"\"\"\n",
    "    Bit hacky - should refactor and figure out how to handle missing isoform specificity info.\n",
    "    \"\"\"\n",
    "    from Bio import SeqIO\n",
    "    import pandas as pd\n",
    "    df = pd.DataFrame(columns=['experiemnt', 'pleft', 'ro1', 'ro2', 'ro3', \n",
    "                               'pright', 'seq', 'gene', 'tid', \n",
    "                              'start', 'length', 'gc', 'tm', 'specicity'])\n",
    "    readout_dict = {}\n",
    "    oligos = SeqIO.FastaIO.SimpleFastaParser(open(fname, 'r'))\n",
    "    rows = []\n",
    "    fpkms = []\n",
    "    for header, seq in oligos:\n",
    "        fields = header.split(' ')\n",
    "        experiment = str(fields[0])\n",
    "        primer_left = str(fields[1])\n",
    "        primer_seqL = seq[:20]\n",
    "        primer_seqR = seq[-20:]\n",
    "        readout1 = str(fields[2])\n",
    "        readout_dict[readout1] = seq[20+1:20+1+20]\n",
    "        isoSpecificity = 1\n",
    "        # Order is different if Readouts are RO1/RO2 - encoding - RO3 vs RO1 - encoding - RO2/RO3\n",
    "        # Check with if statement and handle accordingly.\n",
    "        if '__' not in fields[3]:\n",
    "            readout2 = str(fields[3])\n",
    "            encoding = str(fields[4])\n",
    "            readout3 = fields[5]\n",
    "            ro2_start_idx = 41\n",
    "            ro3_start_idx = 92\n",
    "            readout_dict[readout3] = seq[20+20+20+1+30+1:20+1+20+20+30+1+20]\n",
    "            readout_dict[readout2] = seq[20+1+20:20+1+20+20]\n",
    "            primer_right = fields[6]\n",
    "            gene, tid, start, length, gc, tm, specificity  = encoding.split('__')\n",
    "\n",
    "\n",
    "#             gene, tid, start, length, gc, tm, specificity, isoSpecificity  = encoding.split('__')\n",
    "            encoding_region = seq[20+1+20+20:20+20+1+20+30]\n",
    "        else:\n",
    "            encoding = fields[3]\n",
    "#             isoSpecificity = fields[4]\n",
    "            readout2 = fields[4]\n",
    "            readout3 = fields[5]\n",
    "            ro2_start_idx = 72\n",
    "            ro3_start_idx = 92\n",
    "            readout_dict[readout2] = seq[20+2+20+30:20+20+30+20+2]\n",
    "            readout_dict[readout3] = seq[20+2+20+30+20:20+20+30+20+20+2]\n",
    "            primer_right = fields[6]\n",
    "            gene, tid, start, length, gc, tm, specificity  = encoding.split('__')\n",
    "#             gene, tid, start, length, gc, tm, specificity, isoSpecificity  = encoding.split('__')\n",
    "        # IMPLEMENT READOUT DICT In If Else\n",
    "            encoding_region = seq[20+1+20:20+1+20+30]\n",
    "        \n",
    "        rows.append([experiment, primer_seqL, readout1, readout2, readout3, \n",
    "                       primer_seqR, encoding_region, seq, gene, tid, start,\n",
    "                     length, gc, tm, specificity, isoSpecificity, header])\n",
    "    df = pd.DataFrame(rows, columns=['experiment', 'pleft', 'ro1', 'ro2', 'ro3', \n",
    "                               'pright', 'encodingRegion', 'seq', 'gene', 'tid', \n",
    "                              'start', 'length', 'gc', 'tm', 'specificity', 'isoSpecificity', 'header'])\n",
    "    df = df.drop_duplicates(subset=['gene', 'encodingRegion'])\n",
    "#     if isinstance(counts_df, pd.DataFrame):\n",
    "#         for tid in df.tid.unique():\n",
    "#             fpkm = counts_df[counts_df[tid_column]==tid][counts_df_column]\n",
    "#             tid_idx = df[df.tid==tid].index\n",
    "#             for i in tid_idx:\n",
    "#                 df.set_value(i, counts_df_column, fpkm.values[0])\n",
    "#     df = df.convert_objects(convert_numeric=True)\n",
    "#     df.sort_values(['gene', 'specificity', 'isoSpecificity'], ascending=False, inplace=True)\n",
    "#     df['iso_off_spots'] = (df[counts_df_column] - df['isoSpecificity']*df[counts_df_column])/df['isoSpecificity']\n",
    "#     df['gene_off_spots'] = (df[counts_df_column] - df['specificity']*df[counts_df_column])/df['specificity']\n",
    "#     df = df.drop_duplicates('tid')\n",
    "    return df, primer_seqL, primer_seqR, readout_dict\n",
    "\n",
    "def trim_oligos_to_fit(oligo_df, multi_transcripts_cutoff = 148, min_oligos=48):\n",
    "    df2 = oligo_df.copy()\n",
    "    c = Counter(df2.gene)\n",
    "    high_count = {}\n",
    "    for g, count in c.items():\n",
    "        if count < min_oligos:\n",
    "            print(g, count)\n",
    "#             c.pop(g)\n",
    "            if g not in ['SNAI2', 'SNAI1', 'ORAI1', 'P2RY11', 'INPP1', 'ACTA2', 'PICK1']:\n",
    "                df2.drop(df2[df2.gene==g].index, inplace=True)\n",
    "#         if count>multi_transcripts_cutoff:\n",
    "#             high_count[g] = count\n",
    "#             ixes = list(df2[df2.gene==g].index)\n",
    "#             ixes = np.random.choice(ixes, size=multi_transcripts_cutoff, replace=False)\n",
    "#             df2.drop(ixes, inplace=True)\n",
    "    return df2\n",
    "\n",
    "# def balance_readouts(df, per_tid=64, fa_out='mergos.fa'):\n",
    "#     from itertools import repeat\n",
    "#     tids = df.groupby(group)\n",
    "#     f = open(fa_out, 'w')\n",
    "#     new_df = pd.DataFrame()\n",
    "#     counters = []\n",
    "#     for name, group in tids:\n",
    "#         r_used = pd.unique(np.concatenate((group.ro1.unique(),group.ro2.unique(),group.ro3.unique())))\n",
    "        \n",
    "def balance_readouts(df, primersL, primersR, readouts, per_tid=64, group='tid',\n",
    "                     fa_out='python_mergos.fa', sep='__'):\n",
    "    verbose=False\n",
    "    from itertools import repeat\n",
    "    tids = df.groupby(group)\n",
    "    f = open(fa_out, 'w')\n",
    "    new_df = pd.DataFrame()\n",
    "    counters = {}\n",
    "    for name, group in tids:\n",
    "        counts = Counter()\n",
    "        r_used = pd.unique(np.concatenate((group.ro1.unique(),group.ro2.unique(),group.ro3.unique())))\n",
    "        r_used = np.concatenate(list(repeat(r_used, 1000)))\n",
    "        oligo_index = group.index.tolist()\n",
    "        np.random.shuffle(oligo_index)\n",
    "        oligo_index = oligo_index[:per_tid]\n",
    "        base_idx = 0\n",
    "        c = Counter()\n",
    "        for i, idx in enumerate(oligo_index):\n",
    "            ro1_seq = ''\n",
    "            ro2_seq = ''\n",
    "            ro3_seq = ''\n",
    "            oligo = ''\n",
    "            ro1=''\n",
    "            ro2=''\n",
    "            ro3=''\n",
    "#             try:\n",
    "            ro1_seq = readouts[r_used[base_idx]]\n",
    "            ro1 = r_used[base_idx]\n",
    "        \n",
    "            ro2_seq = readouts[r_used[base_idx+1]]\n",
    "            ro2 = r_used[base_idx+1]\n",
    "            \n",
    "            ro3_seq = readouts[r_used[base_idx+2]]\n",
    "            ro3 = r_used[base_idx+2]\n",
    "            \n",
    "            c.update([ro1, ro2, ro3])\n",
    "            row = group.loc[idx]\n",
    "            rand = np.random.randint(0, high=2)\n",
    "            if (ro1 not in r_used) or (ro2 not in r_used) or (ro3 not in r_used):\n",
    "                print(row)\n",
    "            if rand:\n",
    "                oligo = row.pleft+'A'+ro1_seq+ro2_seq+row.encodingRegion+'A'+ro3_seq+row.pright\n",
    "\n",
    "#                     row.set_value(idx, 'oligo', row.pleft+row.ro1+row.ro2+'A'+row.encodingRegion+'A'+row.ro3+row.pright)\n",
    "            else:\n",
    "                oligo = row.pleft+'A'+ro1_seq+row.encodingRegion+'A'+ro2_seq+ro3_seq+row.pright\n",
    "            if (len(row.encodingRegion) != 30) or (len(ro1_seq) != 20):\n",
    "\n",
    "                print(len(row.encodingRegion), len(ro1_seq))\n",
    "#                     row.set_value(idx, 'oligo', row.pleft+row.ro1+'A'+row.encodingRegion+'A'+row.ro2+row.ro3+row.pright)\n",
    "            header = \">\"+row.gene+sep+row.tid+sep+str(row.start)+sep+ro1+sep+ro2+sep+ro3+sep+row.experiment+'\\n'\n",
    "            f.write(header)\n",
    "            f.write(oligo+'\\n')\n",
    "            base_idx += 3\n",
    "#             except Exception as e:\n",
    "#                 print(e)\n",
    "#                 continue\n",
    "        counters[name] = c\n",
    "        if len(c.keys())>4:\n",
    "            print(name)\n",
    "    f.close()\n",
    "    return new_df, fa_out, counters"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "## Add the number of oligos found per gene to the google sheet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Automatic pdb calling has been turned ON\n"
     ]
    }
   ],
   "source": [
    "%pdb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "df = parse_merfish_oligos('./mouse_bmdm_oligos.fasta')[0]\n",
    "counts = Counter(df.gene)\n",
    "num_oligos = col_cells(expression_worksheet, 7)\n",
    "gnames = col_cells(expression_worksheet, 1)\n",
    "for k, v in counts.items():\n",
    "    idx = [i for i, g in enumerate(gnames) if g.value==k][0]\n",
    "    num_oligos[idx].value = v\n",
    "expression_worksheet.update_cells(num_oligos)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "found_genes = df.gene.unique()\n",
    "all_genes = expression_df.Gene_Name.unique()\n",
    "not_found = []\n",
    "for idx, row in expression_df.iterrows():\n",
    "    if row.Gene_Name in found_genes:\n",
    "        continue\n",
    "    else:\n",
    "        not_found.append((row.Gene_Name, row.TranscriptID))\n",
    "a,b = zip(*not_found)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('Sell', 64),\n",
       " ('Tnfrsf8', 64),\n",
       " ('Mapkapk2', 64),\n",
       " ('Mfsd7a', 64),\n",
       " ('Acod1', 64),\n",
       " ('Dyrk2', 64),\n",
       " ('Zbtb10', 64),\n",
       " ('Ptgs2', 64),\n",
       " ('Skil', 64),\n",
       " ('Rab11fip1', 64),\n",
       " ('Rel', 64),\n",
       " ('Cx3cl1', 64),\n",
       " ('Daam1', 64),\n",
       " ('Ptges', 64),\n",
       " ('Tlr2', 64),\n",
       " ('N4bp1', 64),\n",
       " ('Sod2', 64),\n",
       " ('Gbp3', 64),\n",
       " ('Cd274', 64),\n",
       " ('Gbp5', 64),\n",
       " ('Lpar1', 64),\n",
       " ('Traf1', 64),\n",
       " ('Fam208b', 64),\n",
       " ('Sh3bp4', 64),\n",
       " ('Gpr132', 64),\n",
       " ('Itpr1', 64),\n",
       " ('Lrrc8c', 64),\n",
       " ('Ikbke', 64),\n",
       " ('Tifa', 64),\n",
       " ('Lcp2', 64),\n",
       " ('Mob3c', 64),\n",
       " ('Zc3h12c', 64),\n",
       " ('Malt1', 64),\n",
       " ('Serp1', 64),\n",
       " ('Neurl3', 64),\n",
       " ('Rgs16', 62),\n",
       " ('Lacc1', 60),\n",
       " ('Map3k8', 57),\n",
       " ('Hcar2', 57),\n",
       " ('Cxcl16', 56),\n",
       " ('Cd83', 56),\n",
       " ('Ripk2', 56),\n",
       " ('Dgat2', 54),\n",
       " ('Smpdl3b', 54),\n",
       " ('Igsf6', 53),\n",
       " ('Inhba', 52),\n",
       " ('Tnfsf14', 52),\n",
       " ('Clec4e', 52),\n",
       " ('Cd40', 52),\n",
       " ('Gca', 51)]"
      ]
     },
     "execution_count": 156,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "counts.most_common(50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Counter({'Acod1': 64,\n",
       "         'Adora2b': 43,\n",
       "         'Ampd3': 64,\n",
       "         'Bcl3': 33,\n",
       "         'Birc3': 64,\n",
       "         'Cd274': 64,\n",
       "         'Cd40': 64,\n",
       "         'Cd83': 56,\n",
       "         'Cdkn1a': 50,\n",
       "         'Cish': 64,\n",
       "         'Clec4e': 52,\n",
       "         'Cx3cl1': 64,\n",
       "         'Cxcl16': 60,\n",
       "         'Daam1': 64,\n",
       "         'Dgat2': 54,\n",
       "         'Dyrk2': 64,\n",
       "         'Fam208b': 64,\n",
       "         'Gbp3': 64,\n",
       "         'Gbp5': 64,\n",
       "         'Gca': 51,\n",
       "         'Gpr132': 64,\n",
       "         'Gpr85': 64,\n",
       "         'Hcar2': 57,\n",
       "         'Igsf6': 53,\n",
       "         'Ikbke': 64,\n",
       "         'Il10ra': 64,\n",
       "         'Il4i1': 52,\n",
       "         'Inhba': 52,\n",
       "         'Irf1': 61,\n",
       "         'Itpr1': 64,\n",
       "         'Lacc1': 60,\n",
       "         'Lcp2': 64,\n",
       "         'Lpar1': 64,\n",
       "         'Lrrc8c': 64,\n",
       "         'Maff': 41,\n",
       "         'Malt1': 64,\n",
       "         'Map3k8': 57,\n",
       "         'Mapkapk2': 64,\n",
       "         'Mfsd7a': 64,\n",
       "         'Mob3c': 64,\n",
       "         'Mtmr14': 64,\n",
       "         'N4bp1': 64,\n",
       "         'Nck1': 64,\n",
       "         'Neurl3': 64,\n",
       "         'Nfkb1': 64,\n",
       "         'Nfkb2': 64,\n",
       "         'Nfkbib': 48,\n",
       "         'Orai2': 64,\n",
       "         'Pilra': 58,\n",
       "         'Ppp4r2': 63,\n",
       "         'Ptges': 64,\n",
       "         'Ptgs2': 64,\n",
       "         'Ptx3': 38,\n",
       "         'Rab11fip1': 64,\n",
       "         'Rel': 64,\n",
       "         'Relb': 46,\n",
       "         'Rffl': 64,\n",
       "         'Rgs16': 62,\n",
       "         'Ripk2': 56,\n",
       "         'Rnd1': 54,\n",
       "         'Sav1': 50,\n",
       "         'Sell': 64,\n",
       "         'Serp1': 64,\n",
       "         'Sh3bp4': 64,\n",
       "         'Skil': 64,\n",
       "         'Smpdl3b': 54,\n",
       "         'Sod2': 64,\n",
       "         'Tifa': 64,\n",
       "         'Tlr2': 64,\n",
       "         'Tnfaip2': 64,\n",
       "         'Tnfrsf8': 64,\n",
       "         'Tnfsf14': 52,\n",
       "         'Traf1': 64,\n",
       "         'Trpm4': 64,\n",
       "         'Vasp': 49,\n",
       "         'Zbtb10': 64,\n",
       "         'Zbtb5': 64,\n",
       "         'Zc3h12c': 64,\n",
       "         'Zfp263': 64,\n",
       "         'Zfp800': 56})"
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "counts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/robertf/anaconda2/anaconda/lib/python2.7/site-packages/ipykernel/__main__.py:1: RuntimeWarning: invalid value encountered in greater\n",
      "  if __name__ == '__main__':\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gene_Name</th>\n",
       "      <th>Basal</th>\n",
       "      <th>Max Induction</th>\n",
       "      <th>TranscriptID</th>\n",
       "      <th>max_length</th>\n",
       "      <th>go term</th>\n",
       "      <th>Unnamed: 6</th>\n",
       "      <th>Unnamed: 7</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Lrrc8c</td>\n",
       "      <td>21.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>ENSMUST00000067924</td>\n",
       "      <td>6976.0</td>\n",
       "      <td>membrane</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Sh3bp4</td>\n",
       "      <td>314.0</td>\n",
       "      <td>171.0</td>\n",
       "      <td>ENSMUST00000066279</td>\n",
       "      <td>4995.0</td>\n",
       "      <td>membrane</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Rffl</td>\n",
       "      <td>36.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>ENSMUST00000074515</td>\n",
       "      <td>4973.0</td>\n",
       "      <td>membrane</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Cp</td>\n",
       "      <td>17.0</td>\n",
       "      <td>151.0</td>\n",
       "      <td>ENSMUST00000108329</td>\n",
       "      <td>4564.0</td>\n",
       "      <td>cell</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Ampd3</td>\n",
       "      <td>71.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>ENSMUST00000005829</td>\n",
       "      <td>4094.0</td>\n",
       "      <td>metal ion binding</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Tmem200b</td>\n",
       "      <td>92.0</td>\n",
       "      <td>178.0</td>\n",
       "      <td>ENSMUST00000102745</td>\n",
       "      <td>3762.0</td>\n",
       "      <td>multicellular organism development</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Tmem243</td>\n",
       "      <td>42.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>ENSMUST00000102745</td>\n",
       "      <td>3762.0</td>\n",
       "      <td>multicellular organism development</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Shisa3</td>\n",
       "      <td>37.0</td>\n",
       "      <td>167.0</td>\n",
       "      <td>ENSMUST00000087241</td>\n",
       "      <td>3760.0</td>\n",
       "      <td>membrane</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Gpr85</td>\n",
       "      <td>65.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>ENSMUST00000060442</td>\n",
       "      <td>3661.0</td>\n",
       "      <td>membrane</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Lcp2</td>\n",
       "      <td>25.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>ENSMUST00000052413</td>\n",
       "      <td>3644.0</td>\n",
       "      <td>immune response</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>Il10ra</td>\n",
       "      <td>320.0</td>\n",
       "      <td>179.0</td>\n",
       "      <td>ENSMUST00000034594</td>\n",
       "      <td>3498.0</td>\n",
       "      <td>membrane</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>Exoc3l4</td>\n",
       "      <td>47.0</td>\n",
       "      <td>115.0</td>\n",
       "      <td>ENSMUST00000223050</td>\n",
       "      <td>3418.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>Tnfrsf8</td>\n",
       "      <td>98.0</td>\n",
       "      <td>144.0</td>\n",
       "      <td>ENSMUST00000030339</td>\n",
       "      <td>3414.0</td>\n",
       "      <td>membrane</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>Arhgef37</td>\n",
       "      <td>225.0</td>\n",
       "      <td>259.0</td>\n",
       "      <td>ENSMUST00000171629</td>\n",
       "      <td>3234.0</td>\n",
       "      <td>positive regulation of GTPase activity</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>Gng4</td>\n",
       "      <td>53.0</td>\n",
       "      <td>86.0</td>\n",
       "      <td>ENSMUST00000021734</td>\n",
       "      <td>3179.0</td>\n",
       "      <td>membrane</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>Trem1</td>\n",
       "      <td>75.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>ENSMUST00000048782</td>\n",
       "      <td>2993.0</td>\n",
       "      <td>membrane</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>Cd40</td>\n",
       "      <td>31.0</td>\n",
       "      <td>191.0</td>\n",
       "      <td>ENSMUST00000017799</td>\n",
       "      <td>2986.0</td>\n",
       "      <td>membrane</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>Tnip1</td>\n",
       "      <td>255.0</td>\n",
       "      <td>294.0</td>\n",
       "      <td>ENSMUST00000102731</td>\n",
       "      <td>2973.0</td>\n",
       "      <td>MyD88-dependent toll-like receptor signaling p...</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>Sele</td>\n",
       "      <td>63.0</td>\n",
       "      <td>134.0</td>\n",
       "      <td>ENSMUST00000027874</td>\n",
       "      <td>2912.0</td>\n",
       "      <td>membrane</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>Mapkapk2</td>\n",
       "      <td>41.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>ENSMUST00000016672</td>\n",
       "      <td>2854.0</td>\n",
       "      <td>protein kinase activity</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>Ms4a4c</td>\n",
       "      <td>123.0</td>\n",
       "      <td>254.0</td>\n",
       "      <td>ENSMUST00000113146</td>\n",
       "      <td>2676.0</td>\n",
       "      <td>hydrolase activity</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>Lacc1</td>\n",
       "      <td>300.0</td>\n",
       "      <td>196.0</td>\n",
       "      <td>ENSMUST00000062789</td>\n",
       "      <td>2444.0</td>\n",
       "      <td>copper ion binding</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>Il6</td>\n",
       "      <td>179.0</td>\n",
       "      <td>114.0</td>\n",
       "      <td>ENSMUST00000199183</td>\n",
       "      <td>2343.0</td>\n",
       "      <td>extracellular region</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>Il23a</td>\n",
       "      <td>214.0</td>\n",
       "      <td>133.0</td>\n",
       "      <td>ENSMUST00000118125</td>\n",
       "      <td>2275.0</td>\n",
       "      <td>oxidation-reduction process</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>Ier3</td>\n",
       "      <td>6.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>ENSMUST00000047194</td>\n",
       "      <td>2175.0</td>\n",
       "      <td>membrane</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>Il12b</td>\n",
       "      <td>35.0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>ENSMUST00000170513</td>\n",
       "      <td>1944.0</td>\n",
       "      <td>membrane</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>Ntng2</td>\n",
       "      <td>3.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>ENSMUST00000071201</td>\n",
       "      <td>1881.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>Bcl2a1d</td>\n",
       "      <td>174.0</td>\n",
       "      <td>123.0</td>\n",
       "      <td>ENSMUST00000120537</td>\n",
       "      <td>1850.0</td>\n",
       "      <td>humoral immune response mediated by circulatin...</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>77</th>\n",
       "      <td>Wfdc21</td>\n",
       "      <td>601.0</td>\n",
       "      <td>357.0</td>\n",
       "      <td>ENSMUST00000155203</td>\n",
       "      <td>7414.0</td>\n",
       "      <td>nucleic acid binding</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79</th>\n",
       "      <td>Skil</td>\n",
       "      <td>1271.0</td>\n",
       "      <td>661.0</td>\n",
       "      <td>ENSMUST00000029194</td>\n",
       "      <td>6717.0</td>\n",
       "      <td>nucleus</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80</th>\n",
       "      <td>Inhba</td>\n",
       "      <td>1472.0</td>\n",
       "      <td>766.0</td>\n",
       "      <td>ENSMUST00000042603</td>\n",
       "      <td>6390.0</td>\n",
       "      <td>extracellular space</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>82</th>\n",
       "      <td>Alpk1</td>\n",
       "      <td>226.0</td>\n",
       "      <td>317.0</td>\n",
       "      <td>ENSMUST00000029662</td>\n",
       "      <td>4795.0</td>\n",
       "      <td>ATP binding</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83</th>\n",
       "      <td>Trim36</td>\n",
       "      <td>464.0</td>\n",
       "      <td>345.0</td>\n",
       "      <td>ENSMUST00000037011</td>\n",
       "      <td>4544.0</td>\n",
       "      <td>transferase activity</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>85</th>\n",
       "      <td>Tnfaip3</td>\n",
       "      <td>477.0</td>\n",
       "      <td>3458.0</td>\n",
       "      <td>ENSMUST00000019997</td>\n",
       "      <td>4422.0</td>\n",
       "      <td>negative regulation of inflammatory response</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>86</th>\n",
       "      <td>Rhof</td>\n",
       "      <td>251.0</td>\n",
       "      <td>1612.0</td>\n",
       "      <td>ENSMUST00000186469</td>\n",
       "      <td>4241.0</td>\n",
       "      <td>membrane</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>87</th>\n",
       "      <td>Nfkb1</td>\n",
       "      <td>735.0</td>\n",
       "      <td>500.0</td>\n",
       "      <td>ENSMUST00000029812</td>\n",
       "      <td>4117.0</td>\n",
       "      <td>nucleus</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>88</th>\n",
       "      <td>Lif</td>\n",
       "      <td>525.0</td>\n",
       "      <td>3839.0</td>\n",
       "      <td>ENSMUST00000066283</td>\n",
       "      <td>4026.0</td>\n",
       "      <td>extracellular space</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93</th>\n",
       "      <td>Arhgef3</td>\n",
       "      <td>154.0</td>\n",
       "      <td>1013.0</td>\n",
       "      <td>ENSMUST00000224981</td>\n",
       "      <td>3618.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>Sgk1</td>\n",
       "      <td>1010.0</td>\n",
       "      <td>1036.0</td>\n",
       "      <td>ENSMUST00000120509</td>\n",
       "      <td>3096.0</td>\n",
       "      <td>membrane</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100</th>\n",
       "      <td>Tlr2</td>\n",
       "      <td>1441.0</td>\n",
       "      <td>4289.0</td>\n",
       "      <td>ENSMUST00000029623</td>\n",
       "      <td>3014.0</td>\n",
       "      <td>membrane</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>101</th>\n",
       "      <td>Tnfsf9</td>\n",
       "      <td>10778.0</td>\n",
       "      <td>12384.0</td>\n",
       "      <td>ENSMUST00000102731</td>\n",
       "      <td>2973.0</td>\n",
       "      <td>MyD88-dependent toll-like receptor signaling p...</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>102</th>\n",
       "      <td>Rarg</td>\n",
       "      <td>308.0</td>\n",
       "      <td>319.0</td>\n",
       "      <td>ENSMUST00000043172</td>\n",
       "      <td>2953.0</td>\n",
       "      <td>positive regulation of transcription from RNA ...</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>103</th>\n",
       "      <td>Sap30</td>\n",
       "      <td>7341.0</td>\n",
       "      <td>18789.0</td>\n",
       "      <td>ENSMUST00000027874</td>\n",
       "      <td>2912.0</td>\n",
       "      <td>membrane</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>106</th>\n",
       "      <td>Ripk2</td>\n",
       "      <td>555.0</td>\n",
       "      <td>856.0</td>\n",
       "      <td>ENSMUST00000037035</td>\n",
       "      <td>2692.0</td>\n",
       "      <td>protein kinase activity</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110</th>\n",
       "      <td>Pilra</td>\n",
       "      <td>526.0</td>\n",
       "      <td>303.0</td>\n",
       "      <td>ENSMUST00000058897</td>\n",
       "      <td>2578.0</td>\n",
       "      <td>membrane</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>112</th>\n",
       "      <td>Clec4e</td>\n",
       "      <td>575.0</td>\n",
       "      <td>3583.0</td>\n",
       "      <td>ENSMUST00000032239</td>\n",
       "      <td>2518.0</td>\n",
       "      <td>membrane</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>113</th>\n",
       "      <td>Marcksl1</td>\n",
       "      <td>1475.0</td>\n",
       "      <td>4788.0</td>\n",
       "      <td>ENSMUST00000031455</td>\n",
       "      <td>2508.0</td>\n",
       "      <td>transmembrane transport</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>120</th>\n",
       "      <td>Rnd1</td>\n",
       "      <td>2870.0</td>\n",
       "      <td>1664.0</td>\n",
       "      <td>ENSMUST00000003451</td>\n",
       "      <td>2203.0</td>\n",
       "      <td>membrane</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>122</th>\n",
       "      <td>Slc2a6</td>\n",
       "      <td>439.0</td>\n",
       "      <td>1410.0</td>\n",
       "      <td>ENSMUST00000045702</td>\n",
       "      <td>2138.0</td>\n",
       "      <td>transmembrane transport</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124</th>\n",
       "      <td>Nfkbib</td>\n",
       "      <td>264.0</td>\n",
       "      <td>406.0</td>\n",
       "      <td>ENSMUST00000032815</td>\n",
       "      <td>2061.0</td>\n",
       "      <td>nucleus</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>126</th>\n",
       "      <td>Il1a</td>\n",
       "      <td>165.0</td>\n",
       "      <td>1238.0</td>\n",
       "      <td>ENSMUST00000028882</td>\n",
       "      <td>1974.0</td>\n",
       "      <td>positive regulation of angiogenesis</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>127</th>\n",
       "      <td>Ly6a</td>\n",
       "      <td>194.0</td>\n",
       "      <td>436.0</td>\n",
       "      <td>ENSMUST00000096350</td>\n",
       "      <td>1933.0</td>\n",
       "      <td>nucleus</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>131</th>\n",
       "      <td>Tnfsf4</td>\n",
       "      <td>632.0</td>\n",
       "      <td>446.0</td>\n",
       "      <td>ENSMUST00000028024</td>\n",
       "      <td>1842.0</td>\n",
       "      <td>positive regulation of interferon-gamma produc...</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Gene_Name    Basal  Max Induction        TranscriptID  max_length  \\\n",
       "5      Lrrc8c     21.0           17.0  ENSMUST00000067924      6976.0   \n",
       "10     Sh3bp4    314.0          171.0  ENSMUST00000066279      4995.0   \n",
       "11       Rffl     36.0           26.0  ENSMUST00000074515      4973.0   \n",
       "15         Cp     17.0          151.0  ENSMUST00000108329      4564.0   \n",
       "19      Ampd3     71.0           28.0  ENSMUST00000005829      4094.0   \n",
       "20   Tmem200b     92.0          178.0  ENSMUST00000102745      3762.0   \n",
       "21    Tmem243     42.0           36.0  ENSMUST00000102745      3762.0   \n",
       "22     Shisa3     37.0          167.0  ENSMUST00000087241      3760.0   \n",
       "23      Gpr85     65.0          120.0  ENSMUST00000060442      3661.0   \n",
       "25       Lcp2     25.0           20.0  ENSMUST00000052413      3644.0   \n",
       "27     Il10ra    320.0          179.0  ENSMUST00000034594      3498.0   \n",
       "28    Exoc3l4     47.0          115.0  ENSMUST00000223050      3418.0   \n",
       "29    Tnfrsf8     98.0          144.0  ENSMUST00000030339      3414.0   \n",
       "32   Arhgef37    225.0          259.0  ENSMUST00000171629      3234.0   \n",
       "33       Gng4     53.0           86.0  ENSMUST00000021734      3179.0   \n",
       "34      Trem1     75.0           34.0  ENSMUST00000048782      2993.0   \n",
       "35       Cd40     31.0          191.0  ENSMUST00000017799      2986.0   \n",
       "36      Tnip1    255.0          294.0  ENSMUST00000102731      2973.0   \n",
       "37       Sele     63.0          134.0  ENSMUST00000027874      2912.0   \n",
       "39   Mapkapk2     41.0           26.0  ENSMUST00000016672      2854.0   \n",
       "41     Ms4a4c    123.0          254.0  ENSMUST00000113146      2676.0   \n",
       "45      Lacc1    300.0          196.0  ENSMUST00000062789      2444.0   \n",
       "46        Il6    179.0          114.0  ENSMUST00000199183      2343.0   \n",
       "47      Il23a    214.0          133.0  ENSMUST00000118125      2275.0   \n",
       "50       Ier3      6.0            7.0  ENSMUST00000047194      2175.0   \n",
       "51      Il12b     35.0           43.0  ENSMUST00000170513      1944.0   \n",
       "54      Ntng2      3.0           26.0  ENSMUST00000071201      1881.0   \n",
       "56    Bcl2a1d    174.0          123.0  ENSMUST00000120537      1850.0   \n",
       "77     Wfdc21    601.0          357.0  ENSMUST00000155203      7414.0   \n",
       "79       Skil   1271.0          661.0  ENSMUST00000029194      6717.0   \n",
       "80      Inhba   1472.0          766.0  ENSMUST00000042603      6390.0   \n",
       "82      Alpk1    226.0          317.0  ENSMUST00000029662      4795.0   \n",
       "83     Trim36    464.0          345.0  ENSMUST00000037011      4544.0   \n",
       "85    Tnfaip3    477.0         3458.0  ENSMUST00000019997      4422.0   \n",
       "86       Rhof    251.0         1612.0  ENSMUST00000186469      4241.0   \n",
       "87      Nfkb1    735.0          500.0  ENSMUST00000029812      4117.0   \n",
       "88        Lif    525.0         3839.0  ENSMUST00000066283      4026.0   \n",
       "93    Arhgef3    154.0         1013.0  ENSMUST00000224981      3618.0   \n",
       "98       Sgk1   1010.0         1036.0  ENSMUST00000120509      3096.0   \n",
       "100      Tlr2   1441.0         4289.0  ENSMUST00000029623      3014.0   \n",
       "101    Tnfsf9  10778.0        12384.0  ENSMUST00000102731      2973.0   \n",
       "102      Rarg    308.0          319.0  ENSMUST00000043172      2953.0   \n",
       "103     Sap30   7341.0        18789.0  ENSMUST00000027874      2912.0   \n",
       "106     Ripk2    555.0          856.0  ENSMUST00000037035      2692.0   \n",
       "110     Pilra    526.0          303.0  ENSMUST00000058897      2578.0   \n",
       "112    Clec4e    575.0         3583.0  ENSMUST00000032239      2518.0   \n",
       "113  Marcksl1   1475.0         4788.0  ENSMUST00000031455      2508.0   \n",
       "120      Rnd1   2870.0         1664.0  ENSMUST00000003451      2203.0   \n",
       "122    Slc2a6    439.0         1410.0  ENSMUST00000045702      2138.0   \n",
       "124    Nfkbib    264.0          406.0  ENSMUST00000032815      2061.0   \n",
       "126      Il1a    165.0         1238.0  ENSMUST00000028882      1974.0   \n",
       "127      Ly6a    194.0          436.0  ENSMUST00000096350      1933.0   \n",
       "131    Tnfsf4    632.0          446.0  ENSMUST00000028024      1842.0   \n",
       "\n",
       "                                               go term Unnamed: 6  Unnamed: 7  \n",
       "5                                             membrane      False         NaN  \n",
       "10                                            membrane      False         NaN  \n",
       "11                                            membrane      False         NaN  \n",
       "15                                                cell      False         NaN  \n",
       "19                                   metal ion binding      False         NaN  \n",
       "20                  multicellular organism development      False         NaN  \n",
       "21                  multicellular organism development      False         NaN  \n",
       "22                                            membrane      False         NaN  \n",
       "23                                            membrane      False         NaN  \n",
       "25                                     immune response      False         NaN  \n",
       "27                                            membrane      False         NaN  \n",
       "28                                                 NaN      False         NaN  \n",
       "29                                            membrane      False         NaN  \n",
       "32              positive regulation of GTPase activity      False         NaN  \n",
       "33                                            membrane      False         NaN  \n",
       "34                                            membrane      False         NaN  \n",
       "35                                            membrane      False         NaN  \n",
       "36   MyD88-dependent toll-like receptor signaling p...      False         NaN  \n",
       "37                                            membrane      False         NaN  \n",
       "39                             protein kinase activity      False         NaN  \n",
       "41                                  hydrolase activity      False         NaN  \n",
       "45                                  copper ion binding      False         NaN  \n",
       "46                                extracellular region      False         NaN  \n",
       "47                         oxidation-reduction process      False         NaN  \n",
       "50                                            membrane      False         NaN  \n",
       "51                                            membrane      False         NaN  \n",
       "54                                                 NaN      False         NaN  \n",
       "56   humoral immune response mediated by circulatin...      False         NaN  \n",
       "77                                nucleic acid binding       True         NaN  \n",
       "79                                             nucleus       True         NaN  \n",
       "80                                 extracellular space       True         NaN  \n",
       "82                                         ATP binding       True         NaN  \n",
       "83                                transferase activity       True         NaN  \n",
       "85        negative regulation of inflammatory response       True         NaN  \n",
       "86                                            membrane       True         NaN  \n",
       "87                                             nucleus       True         NaN  \n",
       "88                                 extracellular space       True         NaN  \n",
       "93                                                 NaN       True         NaN  \n",
       "98                                            membrane       True         NaN  \n",
       "100                                           membrane       True         NaN  \n",
       "101  MyD88-dependent toll-like receptor signaling p...       True         NaN  \n",
       "102  positive regulation of transcription from RNA ...       True         NaN  \n",
       "103                                           membrane       True         NaN  \n",
       "106                            protein kinase activity       True         NaN  \n",
       "110                                           membrane       True         NaN  \n",
       "112                                           membrane       True         NaN  \n",
       "113                            transmembrane transport       True         NaN  \n",
       "120                                           membrane       True         NaN  \n",
       "122                            transmembrane transport       True         NaN  \n",
       "124                                            nucleus       True         NaN  \n",
       "126                positive regulation of angiogenesis       True         NaN  \n",
       "127                                            nucleus       True         NaN  \n",
       "131  positive regulation of interferon-gamma produc...       True         NaN  "
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "expression_df[(expression_df.Gene_Name.isin(not_found)) & (expression_df.max_length.values>1500)]"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
